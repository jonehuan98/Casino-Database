--Generate tables

CREATE TABLE user_info (
    uid int NOT NULL,
    hashed_password NOT NULL,
    email varchar(255) NOT NULL,
    user_status,
    child_address_BTC,
    child_address_LTC,
    child_address_DOGE,
    user_balance_BTC,
    user_balance_LTC,
    user_balance_DOGE,
    newsletter_true,
    terms_conditions_accepted,
    email_verification_code,
    user_referral_code,
    PRIMARY KEY (uid)
);

CREATE TABLE transaction_DOGE (
    tid_DOGE NOT NULL,
    child_address_DOGE,
    amount_DOGE,
    transaction_time,
    blockchain_confirmation,  
    PRIMARY KEY (tid_DOGE) 
);

CREATE TABLE transaction_LTC (
    tid_LTC NOT NULL,
    child_address_DOGE,
    amount_LTC,
    transaction_time,
    blockchain_confirmation,  
    PRIMARY KEY (tid_LTC) 
);

CREATE TABLE transaction_BTC (
    tid_BTC NOT NULL,
    child_address_BTC,
    amount_BTC,
    transaction_time,
    blockchain_confirmation,
    PRIMARY KEY (tid_BTC)
);

CREATE TABLE game_history (
    sessionid NOT NULL,
    gameid,
    timestamp,
    amount_game,
    currency,
    uid,
    PRIMARY KEY (sessionid)  
);

--Queries

--admin

-- basic sign up
INSERT INTO user_info (uid, hashed_password, email, user_status)
VALUES (,,,customer);

-- next stage sign up, if verification code true, terms and conditions true
-- your api should generate the child wallets, check balances of child wallets (optional, else 0), check newsletter.
UPDATE user_info
SET child_address_BTC = "generated from api",
    child_address_LTC = "generated from api",
    child_address_DOGE = "generated from api",
    user_balance_BTC = "generated from api",
    user_balance_LTC = "generated from api",
    user_balance_DOGE = "generated from api",
    newsletter_true = "",
    terms_conditions_accepted = true,
    email_verification_code = "",
    user_referral_code = "",
WHERE uid = "user in question";

-- transactions

-- if user prompts deposit in selected currency:
-- check child wallet for depositamount and transactionid 
INSERT INTO transaction_BTC
VALUES (tid_BTC, child_address_BTC, amount_BTC, transaction_time, blockchain_confirmation)

-- and if blockchain_confirmation true:
UPDATE user_info
SET user_balance_BTC += depositamount (int)
WHERE uid = "child_adress_BTC";





















